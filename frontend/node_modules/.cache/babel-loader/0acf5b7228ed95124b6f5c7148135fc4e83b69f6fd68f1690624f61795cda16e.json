{"ast":null,"code":"import { faker } from '@faker-js/faker';\nexport const users = Array(1000).fill(0).map((_, i) => ({\n  id: i,\n  name: faker.person.fullName()\n}));\n\n// Fake function mocking an api\nexport const fetchUsers = async search => {\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return users.filter(user => user.name.toLowerCase().includes(search.toLowerCase()));\n};","map":{"version":3,"names":["faker","users","Array","fill","map","_","i","id","name","person","fullName","fetchUsers","search","Promise","resolve","setTimeout","filter","user","toLowerCase","includes"],"sources":["/Users/jahanzaib/Documents/react-code-test/react-code-challenge/src/utils.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\n\nexport interface User {\n  id: number;\n  name: string;\n}\n\nexport const users = Array(1000)\n  .fill(0)\n  .map((_, i) => ({\n    id: i,\n    name: faker.person.fullName(),\n  }));\n\n// Fake function mocking an api\nexport const fetchUsers = async (search: string) => {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  return users.filter((user) =>\n    user.name.toLowerCase().includes(search.toLowerCase()),\n  );\n};\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,iBAAiB;AAOvC,OAAO,MAAMC,KAAK,GAAGC,KAAK,CAAC,IAAI,CAAC,CAC7BC,IAAI,CAAC,CAAC,CAAC,CACPC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM;EACdC,EAAE,EAAED,CAAC;EACLE,IAAI,EAAER,KAAK,CAACS,MAAM,CAACC,QAAQ,CAAC;AAC9B,CAAC,CAAC,CAAC;;AAEL;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,MAAc,IAAK;EAClD,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACzD,OAAOb,KAAK,CAACe,MAAM,CAAEC,IAAI,IACvBA,IAAI,CAACT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACP,MAAM,CAACM,WAAW,CAAC,CAAC,CACvD,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}